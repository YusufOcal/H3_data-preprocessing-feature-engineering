{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#### 1. Veri Setini Yükleyin\n","   - Heart Disease UCI veri setini indirin ve bir DataFrame olarak yükleyin.\n","   - Veri setinin boyutlarını, sütun isimlerini ve veri türlerini inceleyin."],"metadata":{"id":"Wlx9y1-YGYX1"}},{"cell_type":"code","execution_count":38,"metadata":{"id":"GJx2b-xokRFV","executionInfo":{"status":"ok","timestamp":1741198334220,"user_tz":-180,"elapsed":46,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","# Veri setini yükleme\n","df = pd.read_csv(\"/content/heart_disease_uci.csv\")\n"]},{"cell_type":"code","source":["# Veri setinin genel yapısını gözlemleme\n","df.shape\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rlHf0l_JkYuE","executionInfo":{"status":"ok","timestamp":1741198337054,"user_tz":-180,"elapsed":22,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"e1f8b00c-6266-47d4-c77d-70ece98d3ca5"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(920, 16)"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["df.columns\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8HqJY2R_Gp8p","executionInfo":{"status":"ok","timestamp":1741198344476,"user_tz":-180,"elapsed":18,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"e5a29e7f-6313-40c9-c922-2dcda9dcea27"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['id', 'age', 'sex', 'dataset', 'cp', 'trestbps', 'chol', 'fbs',\n","       'restecg', 'thalch', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'num'],\n","      dtype='object')"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["display(df.info())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":445},"id":"gi9lgO0kGrdt","executionInfo":{"status":"ok","timestamp":1741198354394,"user_tz":-180,"elapsed":12,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"ac92ecd9-4632-477e-ff02-cfd5a4dc9115"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 920 entries, 0 to 919\n","Data columns (total 16 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   id        920 non-null    int64  \n"," 1   age       920 non-null    int64  \n"," 2   sex       920 non-null    object \n"," 3   dataset   920 non-null    object \n"," 4   cp        920 non-null    object \n"," 5   trestbps  861 non-null    float64\n"," 6   chol      890 non-null    float64\n"," 7   fbs       830 non-null    object \n"," 8   restecg   918 non-null    object \n"," 9   thalch    865 non-null    float64\n"," 10  exang     865 non-null    object \n"," 11  oldpeak   858 non-null    float64\n"," 12  slope     611 non-null    object \n"," 13  ca        309 non-null    float64\n"," 14  thal      434 non-null    object \n"," 15  num       920 non-null    int64  \n","dtypes: float64(5), int64(3), object(8)\n","memory usage: 115.1+ KB\n"]},{"output_type":"display_data","data":{"text/plain":["None"]},"metadata":{}}]},{"cell_type":"markdown","source":["#### 2. Veri Setinin Keşfi\n","   - **Veri Yapısını İnceleyin**: Veri setinin genel yapısına bakın; kaç gözlem ve değişken içerdiğini gözlemleyin.\n","   - **Özet İstatistikler**: Sayısal sütunların ortalama, standart sapma, min, max ve çeyrek değerlerini inceleyin.\n","   - **Eksik Değer Analizi**: Eksik veri olup olmadığını kontrol edin ve eksik değerleri nasıl işleyeceğinize karar verin."],"metadata":{"id":"kBEpuioUG9N5"}},{"cell_type":"code","source":["display(df.describe())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"5is4_1yCGtoA","executionInfo":{"status":"ok","timestamp":1741198387591,"user_tz":-180,"elapsed":85,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"7765085d-63d8-4150-ffc0-dd2b6d4c6476"},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":["               id         age    trestbps        chol      thalch     oldpeak  \\\n","count  920.000000  920.000000  861.000000  890.000000  865.000000  858.000000   \n","mean   460.500000   53.510870  132.132404  199.130337  137.545665    0.878788   \n","std    265.725422    9.424685   19.066070  110.780810   25.926276    1.091226   \n","min      1.000000   28.000000    0.000000    0.000000   60.000000   -2.600000   \n","25%    230.750000   47.000000  120.000000  175.000000  120.000000    0.000000   \n","50%    460.500000   54.000000  130.000000  223.000000  140.000000    0.500000   \n","75%    690.250000   60.000000  140.000000  268.000000  157.000000    1.500000   \n","max    920.000000   77.000000  200.000000  603.000000  202.000000    6.200000   \n","\n","               ca         num  \n","count  309.000000  920.000000  \n","mean     0.676375    0.995652  \n","std      0.935653    1.142693  \n","min      0.000000    0.000000  \n","25%      0.000000    0.000000  \n","50%      0.000000    1.000000  \n","75%      1.000000    2.000000  \n","max      3.000000    4.000000  "],"text/html":["\n","  <div id=\"df-d2d91c36-a00b-463d-b670-cf505ec2936f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>age</th>\n","      <th>trestbps</th>\n","      <th>chol</th>\n","      <th>thalch</th>\n","      <th>oldpeak</th>\n","      <th>ca</th>\n","      <th>num</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>920.000000</td>\n","      <td>920.000000</td>\n","      <td>861.000000</td>\n","      <td>890.000000</td>\n","      <td>865.000000</td>\n","      <td>858.000000</td>\n","      <td>309.000000</td>\n","      <td>920.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>460.500000</td>\n","      <td>53.510870</td>\n","      <td>132.132404</td>\n","      <td>199.130337</td>\n","      <td>137.545665</td>\n","      <td>0.878788</td>\n","      <td>0.676375</td>\n","      <td>0.995652</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>265.725422</td>\n","      <td>9.424685</td>\n","      <td>19.066070</td>\n","      <td>110.780810</td>\n","      <td>25.926276</td>\n","      <td>1.091226</td>\n","      <td>0.935653</td>\n","      <td>1.142693</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>60.000000</td>\n","      <td>-2.600000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>230.750000</td>\n","      <td>47.000000</td>\n","      <td>120.000000</td>\n","      <td>175.000000</td>\n","      <td>120.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>460.500000</td>\n","      <td>54.000000</td>\n","      <td>130.000000</td>\n","      <td>223.000000</td>\n","      <td>140.000000</td>\n","      <td>0.500000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>690.250000</td>\n","      <td>60.000000</td>\n","      <td>140.000000</td>\n","      <td>268.000000</td>\n","      <td>157.000000</td>\n","      <td>1.500000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>920.000000</td>\n","      <td>77.000000</td>\n","      <td>200.000000</td>\n","      <td>603.000000</td>\n","      <td>202.000000</td>\n","      <td>6.200000</td>\n","      <td>3.000000</td>\n","      <td>4.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2d91c36-a00b-463d-b670-cf505ec2936f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d2d91c36-a00b-463d-b670-cf505ec2936f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d2d91c36-a00b-463d-b670-cf505ec2936f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ade11f0c-6216-49f9-a6f1-db653bb50d2f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ade11f0c-6216-49f9-a6f1-db653bb50d2f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ade11f0c-6216-49f9-a6f1-db653bb50d2f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 331.2677095029219,\n        \"min\": 1.0,\n        \"max\": 920.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          920.0,\n          460.5,\n          690.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 309.3334389931605,\n        \"min\": 9.424685209576857,\n        \"max\": 920.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53.51086956521739,\n          54.0,\n          920.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 274.94505778449957,\n        \"min\": 0.0,\n        \"max\": 861.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          132.13240418118468,\n          130.0,\n          861.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 292.2503812409585,\n        \"min\": 0.0,\n        \"max\": 890.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          199.13033707865168,\n          223.0,\n          890.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 268.975948988382,\n        \"min\": 25.926276492797612,\n        \"max\": 865.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          137.5456647398844,\n          140.0,\n          865.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 302.97624420626846,\n        \"min\": -2.6,\n        \"max\": 858.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8787878787878788,\n          0.5,\n          858.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.96902697369578,\n        \"min\": 0.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          309.0,\n          0.6763754045307443,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 324.8100629420021,\n        \"min\": 0.0,\n        \"max\": 920.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          920.0,\n          0.9956521739130435,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":586},"id":"jKFQx5bklmqj","executionInfo":{"status":"ok","timestamp":1741198428010,"user_tz":-180,"elapsed":49,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"fa111ac3-3a22-4f43-d9bc-ae525da66d63","collapsed":true},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id            0\n","age           0\n","sex           0\n","dataset       0\n","cp            0\n","trestbps     59\n","chol         30\n","fbs          90\n","restecg       2\n","thalch       55\n","exang        55\n","oldpeak      62\n","slope       309\n","ca          611\n","thal        486\n","num           0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>dataset</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>cp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>trestbps</th>\n","      <td>59</td>\n","    </tr>\n","    <tr>\n","      <th>chol</th>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>fbs</th>\n","      <td>90</td>\n","    </tr>\n","    <tr>\n","      <th>restecg</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>thalch</th>\n","      <td>55</td>\n","    </tr>\n","    <tr>\n","      <th>exang</th>\n","      <td>55</td>\n","    </tr>\n","    <tr>\n","      <th>oldpeak</th>\n","      <td>62</td>\n","    </tr>\n","    <tr>\n","      <th>slope</th>\n","      <td>309</td>\n","    </tr>\n","    <tr>\n","      <th>ca</th>\n","      <td>611</td>\n","    </tr>\n","    <tr>\n","      <th>thal</th>\n","      <td>486</td>\n","    </tr>\n","    <tr>\n","      <th>num</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# Eksik değerleri doldurma\n","# 1. Sayısal Değişkenler için Ortalama ile Doldurma\n","df['trestbps'].fillna(df['trestbps'].mean(), inplace=True)\n","df['chol'].fillna(df['chol'].mean(), inplace=True)\n","df['thalch'].fillna(df['thalch'].mean(), inplace=True)\n","df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RV8C9CJNl6dP","executionInfo":{"status":"ok","timestamp":1741198500327,"user_tz":-180,"elapsed":24,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"8ed5e74e-93c7-4688-c82b-7cfec1b901f9","collapsed":true},"execution_count":44,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-44-9711fa6d14d1>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['trestbps'].fillna(df['trestbps'].mean(), inplace=True)\n","<ipython-input-44-9711fa6d14d1>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['chol'].fillna(df['chol'].mean(), inplace=True)\n","<ipython-input-44-9711fa6d14d1>:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['thalch'].fillna(df['thalch'].mean(), inplace=True)\n","<ipython-input-44-9711fa6d14d1>:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)\n"]}]},{"cell_type":"code","source":["# 2. Kategorik Değişkenler için Mod ile Doldurma\n","df['fbs'].fillna(df['fbs'].mode()[0], inplace=True)\n","df['restecg'].fillna(df['restecg'].mode()[0], inplace=True)\n","df['slope'].fillna(df['slope'].mode()[0], inplace=True)\n","df['exang'].fillna(df['exang'].mode()[0], inplace=True)  # exang sütununu da dolduruyoruz\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LekibHXns9uv","executionInfo":{"status":"ok","timestamp":1741198524221,"user_tz":-180,"elapsed":54,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"60b609ca-1a83-4fb1-a852-4f355101e357","collapsed":true},"execution_count":45,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-45-f7620d731111>:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['fbs'].fillna(df['fbs'].mode()[0], inplace=True)\n","<ipython-input-45-f7620d731111>:2: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df['fbs'].fillna(df['fbs'].mode()[0], inplace=True)\n","<ipython-input-45-f7620d731111>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['restecg'].fillna(df['restecg'].mode()[0], inplace=True)\n","<ipython-input-45-f7620d731111>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['slope'].fillna(df['slope'].mode()[0], inplace=True)\n","<ipython-input-45-f7620d731111>:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['exang'].fillna(df['exang'].mode()[0], inplace=True)  # exang sütununu da dolduruyoruz\n","<ipython-input-45-f7620d731111>:5: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df['exang'].fillna(df['exang'].mode()[0], inplace=True)  # exang sütununu da dolduruyoruz\n"]}]},{"cell_type":"code","source":["\n","# İşlemler sonrası veri setini kontrol etme\n","display(df.info())  # Eksik verilerin kontrolü\n","display(df.head())  # İlk birkaç satırını görme"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":723},"id":"AJvz24YdmzsR","executionInfo":{"status":"ok","timestamp":1741198531601,"user_tz":-180,"elapsed":231,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"fffa26a3-057d-4e48-e39b-8625b4706816","collapsed":true},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 920 entries, 0 to 919\n","Data columns (total 16 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   id        920 non-null    int64  \n"," 1   age       920 non-null    int64  \n"," 2   sex       920 non-null    object \n"," 3   dataset   920 non-null    object \n"," 4   cp        920 non-null    object \n"," 5   trestbps  920 non-null    float64\n"," 6   chol      920 non-null    float64\n"," 7   fbs       920 non-null    bool   \n"," 8   restecg   920 non-null    object \n"," 9   thalch    920 non-null    float64\n"," 10  exang     920 non-null    bool   \n"," 11  oldpeak   920 non-null    float64\n"," 12  slope     920 non-null    object \n"," 13  ca        309 non-null    float64\n"," 14  thal      434 non-null    object \n"," 15  num       920 non-null    int64  \n","dtypes: bool(2), float64(5), int64(3), object(6)\n","memory usage: 102.6+ KB\n"]},{"output_type":"display_data","data":{"text/plain":["None"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["   id  age     sex    dataset               cp  trestbps   chol    fbs  \\\n","0   1   63    Male  Cleveland   typical angina     145.0  233.0   True   \n","1   2   67    Male  Cleveland     asymptomatic     160.0  286.0  False   \n","2   3   67    Male  Cleveland     asymptomatic     120.0  229.0  False   \n","3   4   37    Male  Cleveland      non-anginal     130.0  250.0  False   \n","4   5   41  Female  Cleveland  atypical angina     130.0  204.0  False   \n","\n","          restecg  thalch  exang  oldpeak        slope   ca  \\\n","0  lv hypertrophy   150.0  False      2.3  downsloping  0.0   \n","1  lv hypertrophy   108.0   True      1.5         flat  3.0   \n","2  lv hypertrophy   129.0   True      2.6         flat  2.0   \n","3          normal   187.0  False      3.5  downsloping  0.0   \n","4  lv hypertrophy   172.0  False      1.4    upsloping  0.0   \n","\n","                thal  num  \n","0       fixed defect    0  \n","1             normal    2  \n","2  reversable defect    1  \n","3             normal    0  \n","4             normal    0  "],"text/html":["\n","  <div id=\"df-46746b65-1a07-4fa5-ba03-e47d3d86345d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>dataset</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>chol</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalch</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>slope</th>\n","      <th>ca</th>\n","      <th>thal</th>\n","      <th>num</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>63</td>\n","      <td>Male</td>\n","      <td>Cleveland</td>\n","      <td>typical angina</td>\n","      <td>145.0</td>\n","      <td>233.0</td>\n","      <td>True</td>\n","      <td>lv hypertrophy</td>\n","      <td>150.0</td>\n","      <td>False</td>\n","      <td>2.3</td>\n","      <td>downsloping</td>\n","      <td>0.0</td>\n","      <td>fixed defect</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>67</td>\n","      <td>Male</td>\n","      <td>Cleveland</td>\n","      <td>asymptomatic</td>\n","      <td>160.0</td>\n","      <td>286.0</td>\n","      <td>False</td>\n","      <td>lv hypertrophy</td>\n","      <td>108.0</td>\n","      <td>True</td>\n","      <td>1.5</td>\n","      <td>flat</td>\n","      <td>3.0</td>\n","      <td>normal</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>67</td>\n","      <td>Male</td>\n","      <td>Cleveland</td>\n","      <td>asymptomatic</td>\n","      <td>120.0</td>\n","      <td>229.0</td>\n","      <td>False</td>\n","      <td>lv hypertrophy</td>\n","      <td>129.0</td>\n","      <td>True</td>\n","      <td>2.6</td>\n","      <td>flat</td>\n","      <td>2.0</td>\n","      <td>reversable defect</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>37</td>\n","      <td>Male</td>\n","      <td>Cleveland</td>\n","      <td>non-anginal</td>\n","      <td>130.0</td>\n","      <td>250.0</td>\n","      <td>False</td>\n","      <td>normal</td>\n","      <td>187.0</td>\n","      <td>False</td>\n","      <td>3.5</td>\n","      <td>downsloping</td>\n","      <td>0.0</td>\n","      <td>normal</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>41</td>\n","      <td>Female</td>\n","      <td>Cleveland</td>\n","      <td>atypical angina</td>\n","      <td>130.0</td>\n","      <td>204.0</td>\n","      <td>False</td>\n","      <td>lv hypertrophy</td>\n","      <td>172.0</td>\n","      <td>False</td>\n","      <td>1.4</td>\n","      <td>upsloping</td>\n","      <td>0.0</td>\n","      <td>normal</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46746b65-1a07-4fa5-ba03-e47d3d86345d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-46746b65-1a07-4fa5-ba03-e47d3d86345d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-46746b65-1a07-4fa5-ba03-e47d3d86345d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b3cb3862-2a53-43fe-8984-14842e279fa7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3cb3862-2a53-43fe-8984-14842e279fa7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b3cb3862-2a53-43fe-8984-14842e279fa7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 37,\n        \"max\": 67,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          67,\n          41,\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dataset\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Cleveland\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"asymptomatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.652475842498529,\n        \"min\": 120.0,\n        \"max\": 160.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          160.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.33644672666857,\n        \"min\": 204.0,\n        \"max\": 286.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          286.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"normal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.838655750518114,\n        \"min\": 108.0,\n        \"max\": 187.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          108.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.861974477580398,\n        \"min\": 1.4,\n        \"max\": 3.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"downsloping\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4142135623730951,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"fixed defect\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["# 3. Eksik Veri Oranı Yüksek Olan Sütunları Kaldırma\n","df.drop(columns=['ca', 'thal'], inplace=True)"],"metadata":{"id":"3m2nvEgjs_To","executionInfo":{"status":"ok","timestamp":1741198571923,"user_tz":-180,"elapsed":44,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BCItJCINrlcx","executionInfo":{"status":"ok","timestamp":1741198575435,"user_tz":-180,"elapsed":10,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"44e661dd-4547-4e9c-c0b9-04d332f48e1f"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['id', 'age', 'sex', 'dataset', 'cp', 'trestbps', 'chol', 'fbs',\n","       'restecg', 'thalch', 'exang', 'oldpeak', 'slope', 'num'],\n","      dtype='object')"]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","source":["#### 3. Aykırı Değer Analizi\n","   - **Box Plot ile Görselleştirme**: Her sayısal sütun için box plot çizerek aykırı değerleri görselleştirin.\n","   - **Aykırı Değerlerin Tespiti**: IQR yöntemiyle aykırı değerleri belirleyin. Q1 (1. çeyrek) ve Q3 (3. çeyrek) değerlerine göre alt ve üst sınırları hesaplayarak, bu sınırların dışında kalan verileri tespit edin.\n","   - **Aykırı Değerlerin İşlenmesi**: Aykırı değerleri alt ve üst sınırlarla değiştirerek baskılayın veya bu veri noktalarını veri setinden çıkarın."],"metadata":{"id":"r1Prpkx5HOTA"}},{"cell_type":"code","source":["def detect_outliers(dataframe, column, q1=0.05, q3=0.95):\n","    # İlk ve üçüncü çeyrek değerlerini hesaplama\n","    Q1 = dataframe[column].quantile(q1)\n","    Q3 = dataframe[column].quantile(q3)\n","    IQR = Q3 - Q1\n","\n","    # Alt ve üst sınırları belirleme\n","    lower_limit = Q1 - 1.5 * IQR\n","    upper_limit = Q3 + 1.5 * IQR\n","\n","    # Aykırı değerleri filtreleme\n","    outliers = dataframe[(dataframe[column] < lower_limit) | (dataframe[column] > upper_limit)]\n","    return outliers, lower_limit, upper_limit\n","\n","def has_outliers(dataframe, column, q1=0.05, q3=0.95):\n","\n","    _, lower_limit, upper_limit = detect_outliers(dataframe, column, q1, q3)\n","    return dataframe[(dataframe[column] < lower_limit) | (dataframe[column] > upper_limit)].shape[0] > 0\n","\n","def replace_outliers_with_limits(dataframe, column, lower_quantile=0.05, upper_quantile=0.95):\n","\n","    _, lower_limit, upper_limit = detect_outliers(dataframe, column, lower_quantile, upper_quantile)\n","    dataframe[column] = dataframe[column].apply(lambda x: lower_limit if x < lower_limit else (upper_limit if x > upper_limit else x))\n","    print(f\"{column} sütunundaki aykırı değerler {lower_limit} ve {upper_limit} sınırlarına göre değiştirilmiştir.\")\n"],"metadata":{"id":"CEPOmoWJkaQ8","executionInfo":{"status":"ok","timestamp":1741199274635,"user_tz":-180,"elapsed":6,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["# Sadece sayısal sütunları seçiyoruz\n","numeric_columns = df.select_dtypes(include=['number']).columns"],"metadata":{"id":"lQUB5PN8kqk6","executionInfo":{"status":"ok","timestamp":1741199277578,"user_tz":-180,"elapsed":8,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","\n","# Her sayısal sütun için box plot çizimi\n","plt.figure(figsize=(15, 10))\n","for i, col in enumerate(numeric_columns, 1):\n","    plt.subplot(len(numeric_columns), 1, i)\n","    sns.boxplot(data=df, x=col)\n","    plt.title(f\"{col} - Box Plot\")\n","    plt.xlabel(col)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":671},"id":"6FUsYpmnksw6","executionInfo":{"status":"ok","timestamp":1741199311312,"user_tz":-180,"elapsed":1677,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"a451569c-dc48-40f4-805c-86061159ca05","collapsed":true},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 7 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Aykırı Değer Analizi ve Baskılama İşlemi\n","for col in numeric_columns:\n","    print(f\"{col} sütununda aykırı değer var mı?:\", has_outliers(df, col))\n","    if has_outliers(df, col):\n","        replace_outliers_with_limits(df, col)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4X0fUs8xkvPx","executionInfo":{"status":"ok","timestamp":1741200214399,"user_tz":-180,"elapsed":33,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"575bf26a-a832-4dec-cd21-2161554a469f"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["id sütununda aykırı değer var mı?: False\n","age sütununda aykırı değer var mı?: False\n","trestbps sütununda aykırı değer var mı?: True\n","trestbps sütunundaki aykırı değerler 25.0 ve 241.0 sınırlarına göre değiştirilmiştir.\n","chol sütununda aykırı değer var mı?: False\n","thalch sütununda aykırı değer var mı?: False\n","oldpeak sütununda aykırı değer var mı?: False\n","num sütununda aykırı değer var mı?: False\n"]}]},{"cell_type":"code","source":["# Aykırı değerlerin baskılandıktan sonra kontrolü\n","for col in numeric_columns:\n","    print(f\"{col} sütununda aykırı değer var mı?:\", has_outliers(df, col))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sN4WB9f1kxh5","executionInfo":{"status":"ok","timestamp":1741200261764,"user_tz":-180,"elapsed":57,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"937a2e8b-88a5-46f5-df1c-cf0f912fa091"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["id sütununda aykırı değer var mı?: False\n","age sütununda aykırı değer var mı?: False\n","trestbps sütununda aykırı değer var mı?: False\n","chol sütununda aykırı değer var mı?: False\n","thalch sütununda aykırı değer var mı?: False\n","oldpeak sütununda aykırı değer var mı?: False\n","num sütununda aykırı değer var mı?: False\n"]}]},{"cell_type":"markdown","source":["#### 4. Sayısal Değişkenlerin Standartlaştırılması\n","   - **Standartlaştırma (Ölçekleme)**: Sayısal sütunları standartlaştırarak (ortalama 0, standart sapma 1 olacak şekilde) ölçekleyin. Bu işlem, özellikle mesafe bazlı veya doğrusal modellerde daha iyi sonuçlar almanıza yardımcı olabilir."],"metadata":{"id":"JDkScEeHJaDN"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n","\n","numeric_columns = numeric_columns.drop('num') #hedef değişkeni standartlaştırmadık\n","scaler = StandardScaler()\n","df[numeric_columns] = scaler.fit_transform(df[numeric_columns])\n","\n","print(\"\\nStandartlaştırılmış Sayısal Sütunlar:\")\n","print(df[numeric_columns].head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r_a2wYygk7CF","executionInfo":{"status":"ok","timestamp":1741200389179,"user_tz":-180,"elapsed":27,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"6d766282-b6c1-4c52-d73f-6bf184c5f6bf"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Standartlaştırılmış Sayısal Sütunlar:\n","         id       age  trestbps      chol    thalch   oldpeak\n","0 -1.730169  1.007386  0.703329  0.311021  0.495698  1.349421\n","1 -1.726404  1.432034  1.524948  0.797713 -1.175955  0.589832\n","2 -1.722639  1.432034 -0.666036  0.274289 -0.340128  1.634267\n","3 -1.718873 -1.752828 -0.118290  0.467130  1.968345  2.488805\n","4 -1.715108 -1.328180 -0.118290  0.044717  1.371326  0.494884\n"]}]},{"cell_type":"markdown","source":["\n","#### 5. Kategorik Değişkenlerin Sayısallaştırılması\n","   - **Değişkenlerin Türlerine Göre Ayrılması**: Kategorik ve sayısal değişkenleri belirleyin.\n","   - **Kategorik Değişkenlerin Sayısallaştırılması**:\n","     - **Kardinal Olmayan Kategorik Değişkenler**: Kardinal olmayan kategorik değişkenleri (çok fazla benzersiz değer içermeyen) One-Hot Encoding kullanarak sayısallaştırın.\n","     - **Kardinal Kategorik Değişkenler**: Yüksek kardinaliteye sahip kategorik değişkenleri (çok sayıda benzersiz değeri olan) Label Encoding kullanarak sayısallaştırın."],"metadata":{"id":"bUp9clBlHbGS"}},{"cell_type":"code","source":["# Kategorik sütunları seçme\n","categorical_columns = df.select_dtypes(include=['object', 'category']).columns\n","\n","# Benzersiz sınıfları kontrol etme\n","for col in categorical_columns:\n","    print(f\"Sütun: {col}\")\n","    print(f\"Benzersiz Sınıflar: {df[col].unique()}\")\n","    print(f\"Sınıf Sayısı: {df[col].nunique()}\\n\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SnkUhNFixE9U","executionInfo":{"status":"ok","timestamp":1741200605455,"user_tz":-180,"elapsed":16,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"7cee949b-f7de-4092-a5de-97ce33fa295f"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["Sütun: sex\n","Benzersiz Sınıflar: ['Male' 'Female']\n","Sınıf Sayısı: 2\n","\n","Sütun: dataset\n","Benzersiz Sınıflar: ['Cleveland' 'Hungary' 'Switzerland' 'VA Long Beach']\n","Sınıf Sayısı: 4\n","\n","Sütun: cp\n","Benzersiz Sınıflar: ['typical angina' 'asymptomatic' 'non-anginal' 'atypical angina']\n","Sınıf Sayısı: 4\n","\n","Sütun: restecg\n","Benzersiz Sınıflar: ['lv hypertrophy' 'normal' 'st-t abnormality']\n","Sınıf Sayısı: 3\n","\n","Sütun: slope\n","Benzersiz Sınıflar: ['downsloping' 'flat' 'upsloping']\n","Sınıf Sayısı: 3\n","\n"]}]},{"cell_type":"markdown","source":["Encoding Yöntemi Kararları:\n","\n","**sex:**\n","\n","Benzersiz sınıf sayısı: 2.\n","İkili (binary) bir kategori olduğu için **Label Encoding** uygundur. One hot uygun olsa da ikili olması ve fazla sütun istemediğimiz için Label kullanıyoruz\n","Örnek:\n","Male → 0\n","Female → 1\n","\n","**dataset:**\n","\n","Benzersiz sınıf sayısı: 4.\n","Sıralama ilişkisi yok. **OneHotEncoding **uygundur.\n","Örnek:\n","Cleveland → [1, 0, 0, 0]\n","Hungary → [0, 1, 0, 0]\n","Switzerland → [0, 0, 1, 0]\n","VA Long Beach → [0, 0, 0, 1]\n","\n","**cp (Chest Pain - Göğüs Ağrısı Türü):**\n","\n","Benzersiz sınıf sayısı: 4.\n","Sıralama ilişkisi yok.** OneHotEncoding** uygundur.\n","Örnek:\n","typical angina → [1, 0, 0, 0]\n","asymptomatic → [0, 1, 0, 0]\n","non-anginal → [0, 0, 1, 0]\n","atypical angina → [0, 0, 0, 1]\n","\n","**restecg:**\n","\n","Benzersiz sınıf sayısı: 3.\n","Sıralama ilişkisi yok. **OneHotEncoding **uygundur.\n","Örnek:\n","lv hypertrophy → [1, 0, 0]\n","normal → [0, 1, 0]\n","st-t abnormality → [0, 0, 1]\n","\n","**slope:**\n","\n","Benzersiz sınıf sayısı: 3.\n","Sıralama ilişkisi olabilir (örneğin, downsloping < flat < upsloping).\n","Eğer sıralama önemliyse: **Label Encoding** uygundur.\n","Örnek: downsloping → 0, flat → 1, upsloping → 2.\n","Eğer sıralama önemli değilse: **OneHotEncoding** uygundur.\n","Örnek: downsloping → [1, 0, 0], flat → [0, 1, 0], upsloping → [0, 0, 1].\n"],"metadata":{"id":"eX9PJXW9yC35"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n","\n","\n","\n","# 2. Label Encoding ve OneHotEncoding için gruplama\n","label_encoding_columns = ['sex', 'slope']  # Sıralama ilişkisi olan sütunlar (Label Encoding)\n","one_hot_encoding_columns = ['dataset', 'cp', 'restecg']  # Sıralama ilişkisi olmayan sütunlar (OneHotEncoding)\n","\n","# 3. Label Encoding uygulama\n","label_encoder = LabelEncoder()\n","for col in label_encoding_columns:\n","    df[col] = label_encoder.fit_transform(df[col])\n","\n","# 4. OneHotEncoding uygulama\n","one_hot_encoder = OneHotEncoder(sparse_output=False)\n","for col in one_hot_encoding_columns:\n","    # OneHotEncoding için sütunu dönüştür\n","    encoded = one_hot_encoder.fit_transform(df[[col]])\n","    encoded_df = pd.DataFrame(encoded, columns=one_hot_encoder.get_feature_names_out([col]))\n","\n","    # Veri setine ekle ve orijinal sütunu kaldır\n","    df = pd.concat([df, encoded_df], axis=1)\n","    df = df.drop(col, axis=1)\n","\n","\n"],"metadata":{"id":"2e4-hBY8zC6-","executionInfo":{"status":"ok","timestamp":1741201003031,"user_tz":-180,"elapsed":20,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["# Sonuçları kontrol et\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"SFlLNqlJzcco","executionInfo":{"status":"ok","timestamp":1741201007105,"user_tz":-180,"elapsed":72,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"07ecd915-07f7-4542-8581-e8538218ac39"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         id       age  sex  trestbps      chol    fbs    thalch  exang  \\\n","0 -1.730169  1.007386    1  0.703329  0.311021   True  0.495698  False   \n","1 -1.726404  1.432034    1  1.524948  0.797713  False -1.175955   True   \n","2 -1.722639  1.432034    1 -0.666036  0.274289  False -0.340128   True   \n","3 -1.718873 -1.752828    1 -0.118290  0.467130  False  1.968345  False   \n","4 -1.715108 -1.328180    0 -0.118290  0.044717  False  1.371326  False   \n","\n","    oldpeak  slope  ...  dataset_Hungary  dataset_Switzerland  \\\n","0  1.349421      0  ...              0.0                  0.0   \n","1  0.589832      1  ...              0.0                  0.0   \n","2  1.634267      1  ...              0.0                  0.0   \n","3  2.488805      0  ...              0.0                  0.0   \n","4  0.494884      2  ...              0.0                  0.0   \n","\n","   dataset_VA Long Beach  cp_asymptomatic  cp_atypical angina  cp_non-anginal  \\\n","0                    0.0              0.0                 0.0             0.0   \n","1                    0.0              1.0                 0.0             0.0   \n","2                    0.0              1.0                 0.0             0.0   \n","3                    0.0              0.0                 0.0             1.0   \n","4                    0.0              0.0                 1.0             0.0   \n","\n","   cp_typical angina  restecg_lv hypertrophy  restecg_normal  \\\n","0                1.0                     1.0             0.0   \n","1                0.0                     1.0             0.0   \n","2                0.0                     1.0             0.0   \n","3                0.0                     0.0             1.0   \n","4                0.0                     1.0             0.0   \n","\n","   restecg_st-t abnormality  \n","0                       0.0  \n","1                       0.0  \n","2                       0.0  \n","3                       0.0  \n","4                       0.0  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-89d6a9a4-5da3-4035-91ed-c6d6f666c178\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>trestbps</th>\n","      <th>chol</th>\n","      <th>fbs</th>\n","      <th>thalch</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>slope</th>\n","      <th>...</th>\n","      <th>dataset_Hungary</th>\n","      <th>dataset_Switzerland</th>\n","      <th>dataset_VA Long Beach</th>\n","      <th>cp_asymptomatic</th>\n","      <th>cp_atypical angina</th>\n","      <th>cp_non-anginal</th>\n","      <th>cp_typical angina</th>\n","      <th>restecg_lv hypertrophy</th>\n","      <th>restecg_normal</th>\n","      <th>restecg_st-t abnormality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1.730169</td>\n","      <td>1.007386</td>\n","      <td>1</td>\n","      <td>0.703329</td>\n","      <td>0.311021</td>\n","      <td>True</td>\n","      <td>0.495698</td>\n","      <td>False</td>\n","      <td>1.349421</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-1.726404</td>\n","      <td>1.432034</td>\n","      <td>1</td>\n","      <td>1.524948</td>\n","      <td>0.797713</td>\n","      <td>False</td>\n","      <td>-1.175955</td>\n","      <td>True</td>\n","      <td>0.589832</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-1.722639</td>\n","      <td>1.432034</td>\n","      <td>1</td>\n","      <td>-0.666036</td>\n","      <td>0.274289</td>\n","      <td>False</td>\n","      <td>-0.340128</td>\n","      <td>True</td>\n","      <td>1.634267</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-1.718873</td>\n","      <td>-1.752828</td>\n","      <td>1</td>\n","      <td>-0.118290</td>\n","      <td>0.467130</td>\n","      <td>False</td>\n","      <td>1.968345</td>\n","      <td>False</td>\n","      <td>2.488805</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-1.715108</td>\n","      <td>-1.328180</td>\n","      <td>0</td>\n","      <td>-0.118290</td>\n","      <td>0.044717</td>\n","      <td>False</td>\n","      <td>1.371326</td>\n","      <td>False</td>\n","      <td>0.494884</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89d6a9a4-5da3-4035-91ed-c6d6f666c178')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-89d6a9a4-5da3-4035-91ed-c6d6f666c178 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-89d6a9a4-5da3-4035-91ed-c6d6f666c178');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-87dd71d6-7356-404a-98f8-33828ed5a14d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87dd71d6-7356-404a-98f8-33828ed5a14d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-87dd71d6-7356-404a-98f8-33828ed5a14d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":59}]},{"cell_type":"markdown","source":["BONUS ## **Her bir değişken tipini bir fonksiyon ile belirlemek isteyenlere dev hizmet :)** grab_col_names"],"metadata":{"id":"_ek_tmJ9ywV_"}},{"cell_type":"code","source":["def grab_col_names(dataframe, cat_th=10, car_th=20):\n","\n","    # cat_cols, cat_but_car\n","    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n","    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and dataframe[col].dtypes != \"O\"]\n","    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and dataframe[col].dtypes == \"O\"]\n","    cat_cols = cat_cols + num_but_cat\n","    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n","\n","    # num_cols\n","    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n","    num_cols = [col for col in num_cols if col not in num_but_cat]\n","\n","    print(f\"Observations: {dataframe.shape[0]}\")\n","    print(f\"Variables: {dataframe.shape[1]}\")\n","    print(f'cat_cols: {len(cat_cols)}')\n","    print(f'num_cols: {len(num_cols)}')\n","    print(f'cat_but_car: {len(cat_but_car)}')\n","    print(f'num_but_cat: {len(num_but_cat)}')\n","\n","    return cat_cols, num_cols, cat_but_car,num_but_cat\n","\n","\n","cat_cols, num_cols, cat_but_car,num_but_cat = grab_col_names(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9E6DaSDikzlh","executionInfo":{"status":"ok","timestamp":1741201401150,"user_tz":-180,"elapsed":14,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"b97dcf15-5559-4801-f821-058edf9bee12"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Observations: 920\n","Variables: 22\n","cat_cols: 16\n","num_cols: 6\n","cat_but_car: 0\n","num_but_cat: 16\n"]}]},{"cell_type":"code","source":["cat_cols"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r0Z_PTZkmmga","executionInfo":{"status":"ok","timestamp":1741201440906,"user_tz":-180,"elapsed":8,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"5461b69a-273f-425d-99a3-8c762a02dabc"},"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['sex',\n"," 'fbs',\n"," 'exang',\n"," 'slope',\n"," 'num',\n"," 'dataset_Cleveland',\n"," 'dataset_Hungary',\n"," 'dataset_Switzerland',\n"," 'dataset_VA Long Beach',\n"," 'cp_asymptomatic',\n"," 'cp_atypical angina',\n"," 'cp_non-anginal',\n"," 'cp_typical angina',\n"," 'restecg_lv hypertrophy',\n"," 'restecg_normal',\n"," 'restecg_st-t abnormality']"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["num_cols"],"metadata":{"id":"W1Uirv1II6JF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741201451182,"user_tz":-180,"elapsed":43,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"fe628a1b-5872-4227-acf9-11dcec00e605"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['id', 'age', 'trestbps', 'chol', 'thalch', 'oldpeak']"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["cat_but_car"],"metadata":{"id":"NbAvB0wxI89q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741201458272,"user_tz":-180,"elapsed":12,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"0d439bc3-79f0-450a-b676-e69dad4f024b"},"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[]"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["num_but_cat"],"metadata":{"id":"RSu4Ki-6JAVd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741201465530,"user_tz":-180,"elapsed":9,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"fe8bb974-f29f-4691-a91c-33306a2b906b"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['sex',\n"," 'fbs',\n"," 'exang',\n"," 'slope',\n"," 'num',\n"," 'dataset_Cleveland',\n"," 'dataset_Hungary',\n"," 'dataset_Switzerland',\n"," 'dataset_VA Long Beach',\n"," 'cp_asymptomatic',\n"," 'cp_atypical angina',\n"," 'cp_non-anginal',\n"," 'cp_typical angina',\n"," 'restecg_lv hypertrophy',\n"," 'restecg_normal',\n"," 'restecg_st-t abnormality']"]},"metadata":{},"execution_count":64}]},{"cell_type":"markdown","source":["#### 6. Eğitim ve Test Setlerine Ayırma\n","   - **Bağımlı ve Bağımsız Değişkenleri Belirleyin**: `target` sütununu bağımlı değişken (hedef) olarak belirleyin; geri kalan sütunları bağımsız değişkenler olarak tanımlayın.\n","   - **Veri Setini Bölün**: Veri setini %80 eğitim, %20 test olacak şekilde ayırın. Bu işlem, modelin eğitilmesi ve performansının değerlendirilmesi için gereklidir."],"metadata":{"id":"NLgOvZacH-gA"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Bağımlı ve bağımsız değişkenleri belirleme\n","# 'num' sütunu hedef değişken olarak kabul edilmiştir\n","X = df.drop(\"num\", axis=1)  # Bağımsız değişkenler\n","y = df[\"num\"]               # Bağımlı değişken (hedef)\n","\n","# Veri setini eğitim ve test olarak %80 - %20 oranında ayırma\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Eğitim ve test setlerinin boyutlarını kontrol etme\n","print(\"X_train boyutu:\", X_train.shape)\n","print(\"X_test boyutu:\", X_test.shape)\n","print(\"y_train boyutu:\", y_train.shape)\n","print(\"y_test boyutu:\", y_test.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WatNcx-XH_CT","executionInfo":{"status":"ok","timestamp":1741201558293,"user_tz":-180,"elapsed":11,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"f2d59435-55e7-42af-e183-d8cc0fbe1e1f"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train boyutu: (736, 21)\n","X_test boyutu: (184, 21)\n","y_train boyutu: (736,)\n","y_test boyutu: (184,)\n"]}]},{"cell_type":"code","source":["# Veriyi CSV dosyası olarak kaydetme\n","output_path = '/content/drive/MyDrive/KAIRU/Makine Öğrenmesi Atölye-1/datasets/processed_heart.csv'\n","df.to_csv(output_path, index=False)\n","\n","print(f\"Dosya şu konuma kaydedildi: {output_path}\")"],"metadata":{"id":"De4r7Tg00ZwL","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"error","timestamp":1741195023728,"user_tz":-180,"elapsed":146,"user":{"displayName":"hakan çelik","userId":"09915701433729393917"}},"outputId":"d0a559b2-2b9a-44d9-8f92-ba2846d88ea0"},"execution_count":null,"outputs":[{"output_type":"error","ename":"OSError","evalue":"Cannot save file into a non-existent directory: '/content/drive/MyDrive/KAIRU/Makine Öğrenmesi Atölye-1/datasets'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-b9cfe95e801c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Veriyi CSV dosyası olarak kaydetme\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0moutput_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/content/drive/MyDrive/KAIRU/Makine Öğrenmesi Atölye-1/datasets/processed_heart.csv'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Dosya şu konuma kaydedildi: {output_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    331\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m                 )\n\u001b[0;32m--> 333\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mto_csv\u001b[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, decimal, errors, storage_options)\u001b[0m\n\u001b[1;32m   3965\u001b[0m         )\n\u001b[1;32m   3966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3967\u001b[0;31m         return DataFrameRenderer(formatter).to_csv(\n\u001b[0m\u001b[1;32m   3968\u001b[0m             \u001b[0mpath_or_buf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3969\u001b[0m             \u001b[0mlineterminator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlineterminator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py\u001b[0m in \u001b[0;36mto_csv\u001b[0;34m(self, path_or_buf, encoding, sep, columns, index_label, mode, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, errors, storage_options)\u001b[0m\n\u001b[1;32m   1012\u001b[0m             \u001b[0mformatter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfmt\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1013\u001b[0m         )\n\u001b[0;32m-> 1014\u001b[0;31m         \u001b[0mcsv_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcreated_buffer\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/formats/csvs.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \"\"\"\n\u001b[1;32m    250\u001b[0m         \u001b[0;31m# apply compression and byte/text conversion\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m         with get_handle(\n\u001b[0m\u001b[1;32m    252\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    747\u001b[0m     \u001b[0;31m# Only for write methods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m\"r\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_path\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 749\u001b[0;31m         \u001b[0mcheck_parent_directory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    750\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    751\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcompression\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mcheck_parent_directory\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    614\u001b[0m     \u001b[0mparent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    615\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_dir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 616\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mrf\"Cannot save file into a non-existent directory: '{parent}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    617\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: Cannot save file into a non-existent directory: '/content/drive/MyDrive/KAIRU/Makine Öğrenmesi Atölye-1/datasets'"]}]},{"cell_type":"code","source":[],"metadata":{"id":"N9kAGI2FT5IJ"},"execution_count":null,"outputs":[]}]}